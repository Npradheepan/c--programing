using System;
using System.Linq.Expressions;

public class Program
{
	public static void Main()
	{
		ParameterExpression pe = Expression.Parameter(typeof(Student), "s");

		MemberExpression me = Expression.Property(pe, "Age");

		ConstantExpression constant = Expression.Constant(18, typeof(int));

		BinaryExpression body = Expression.GreaterThanOrEqual(me, constant);

		var ExpressionTree = Expression.Lambda<Func<Student, bool>>(body, new[] { pe });


		Console.WriteLine("Expression Tree: {0}", ExpressionTree);

		Console.WriteLine("Expression Tree Body: {0}", ExpressionTree.Body);

		Console.WriteLine("Number of Parameters in Expression Tree: {0}", ExpressionTree.Parameters.Count);

		Console.WriteLine("Parameters in Expression Tree: {0}", ExpressionTree.Parameters[0]);

	}
}

public class Student
{

	public int StudentID { get; set; }
	public string StudentName { get; set; }
	public int Age { get; set; }
}
--------------------------------------------------------------------------------------------------------------------
using System;
using System.Linq.Expressions;

public class Program
{
	public static void Main()
	{
		Expression<Func<Student, bool>> isTeenAgerExpr = s => s.Age > 12 && s.Age < 20;

		var parameters = isTeenAgerExpr.Parameters;

		Console.WriteLine("Expression: {0}", isTeenAgerExpr);

		Console.WriteLine("Expression Type: {0}", isTeenAgerExpr.NodeType);

		foreach (var param in parameters)
		{
			Console.WriteLine("Parameter Name: {0}", param.Name);
			Console.WriteLine("Parameter Type: {0}", param.Type.Name);
		}

		var bodyExpr = isTeenAgerExpr.Body as BinaryExpression;


		Console.WriteLine("Left side of body expression: {0}", bodyExpr.Left);
		Console.WriteLine("Binary Expression Type: {0}", bodyExpr.NodeType);
		Console.WriteLine("Right side of body expression: {0}", bodyExpr.Right);
		Console.WriteLine("Return Type: {0}", isTeenAgerExpr.ReturnType);
	}
}

public class Student
{

	public int StudentID { get; set; }
	public string StudentName { get; set; }
	public int Age { get; set; }
}
