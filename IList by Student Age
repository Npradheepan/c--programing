using System;
using System.Linq;
using System.Collections.Generic;


public class Program
{
	public static void Main()
	{
		// Student collection
		IList<Student> studentList = new List<Student>() {
			new Student() { StudentID = 1, StudentName = "John", Age = 18, StandardID = 1 } ,
				new Student() { StudentID = 2, StudentName = "Steve",  Age = 21, StandardID = 1 } ,
				new Student() { StudentID = 3, StudentName = "Bill",  Age = 18, StandardID = 2 } ,
				new Student() { StudentID = 4, StudentName = "Ram" , Age = 20, StandardID = 2 } ,
				new Student() { StudentID = 5, StudentName = "Ron" , Age = 21 }
		};

		var studentNames = studentList.Where(s => s.Age > 18)
							  .Select(s => s)
							  .Where(st => st.StandardID > 0)
							  .Select(s => s.StudentName);


		foreach (var name in studentNames)
		{
			Console.WriteLine(name);
			Console.ReadKey();
		}
	}
}

public class Student
{

	public int StudentID { get; set; }
	public string StudentName { get; set; }
	public int Age { get; set; }
	public int StandardID { get; set; }
}
-------------------------------------------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;


public class Program
{
    public static void Main()
    { 
        List<Employee> empList = new List<Employee>()
            {
                 new Employee() { ID = 1239, Name = "mary", Salary = 5000, Experience = 5 },
                 new Employee() { ID = 1339, Name = "john", Salary = 4000, Experience = 4 },
                 new Employee() { ID = 1238, Name = "gilli", Salary = 7000, Experience = 8 },
                 new Employee() { ID = 1249, Name = "sure", Salary = 2000, Experience = 2 },
                 new Employee() { ID = 1229, Name = "mamy", Salary = 8000, Experience = 10 },
            };
        Console.WriteLine("which The experience list you need to show!");
        int Num = int.Parse(Console.ReadLine());
        var employeeNames = empList.Where(s => s.Experience > Num)
                                                     .Select(s => s);
                                                   

        foreach (var name in employeeNames)
        {
            Console.WriteLine("Name :{0}, Salary : {1},Experience:{2}", name.Name,name.ID,name.Salary);
        }
        Console.ReadKey();
    }
}

public class Employee
{
    public int ID { get; set; }
    public string Name { get; set; }
    public int Salary { get; set; }
    public int Experience { get; set; }
}

2)----------------------------------------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;


public class Program
{
	public static void Main()
	{
		// Student collection
		IList<Student> studentList = new List<Student>() {
			new Student() { StudentID = 1, StudentName = "John", Age = 18, StandardID = 1 } ,
				new Student() { StudentID = 2, StudentName = "Steve",  Age = 21, StandardID = 1 } ,
				new Student() { StudentID = 3, StudentName = "Bill",  Age = 18, StandardID = 2 } ,
				new Student() { StudentID = 4, StudentName = "Ram" , Age = 20, StandardID = 2 } ,
				new Student() { StudentID = 5, StudentName = "Ron" , Age = 21 }
		};

		var teenStudentsName = from s in studentList
							   where s.Age > 12 && s.Age < 20
							   select new { StudentName = s.StudentName };

		teenStudentsName.ToList().ForEach(s => Console.WriteLine(s.StudentName));
	}
}

public class Student
{

	public int StudentID { get; set; }
	public string StudentName { get; set; }
	public int Age { get; set; }
	public int StandardID { get; set; }
}
-------------------------------------------Select by Experience From concerpt-------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;


public class Program
{
    public static void Main()
    {
        // Student collection
        List<Employee> empList = new List<Employee>()
            {
                 new Employee() { ID = 7623, Name = "mary", Salary = 5000, Experience = 5 },
                 new Employee() { ID = 1339, Name = "john", Salary = 4000, Experience = 4 },
                 new Employee() { ID = 8903, Name = "gilli", Salary = 7000, Experience = 8 },
                 new Employee() { ID = 2354, Name = "sure", Salary = 2000, Experience = 2 },
                 new Employee() { ID = 7893, Name = "hgfdh", Salary = 8000, Experience = 10 },
                  new Employee() { ID = 8762, Name = "agsg", Salary = 2342, Experience = 1 },
                 new Employee() { ID = 6543, Name = "wers", Salary = 85678, Experience = 3 },
                 new Employee() { ID = 6781, Name = "sverrg", Salary = 334231, Experience = 6 },
                 new Employee() { ID = 0890, Name = "bedr", Salary = 88968, Experience = 7 },
                 new Employee() { ID = 8786, Name = "gbnfgns", Salary = 45455, Experience = 10 },
            };
        Console.WriteLine("You can selec your Range of Experience between two numbers!");
        Console.WriteLine("Min Value");
        int num1 = int.Parse(Console.ReadLine());
        Console.WriteLine("Max Value");
        int num2 = int.Parse(Console.ReadLine());
        var LimitemployeeNames = from s in empList
                                 where s.Experience > num1 && s.Experience < num2
                                 select new { s = s.Experience,s.Name,s.Salary, s.ID };
                                      

        LimitemployeeNames.ToList().ForEach(s => Console.WriteLine("Name :{0}, Salary : {1},ID:{2}", s.Name,s.Salary,s.ID));
        Console.ReadKey();
    }
}

public class Employee
{
    public int ID { get; set; }
    public string Name { get; set; }
    public int Salary { get; set; }
    public int Experience { get; set; }
}

3)----------------------------------------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;


public class Program
{
	public static void Main()
	{
		// Student collection
		IList<Student> studentList = new List<Student>() {
			new Student() { StudentID = 1, StudentName = "John", Age = 18, StandardID = 1 } ,
				new Student() { StudentID = 2, StudentName = "Steve",  Age = 21, StandardID = 1 } ,
				new Student() { StudentID = 3, StudentName = "Bill",  Age = 18, StandardID = 2 } ,
				new Student() { StudentID = 4, StudentName = "Ram" , Age = 20, StandardID = 2 } ,
				new Student() { StudentID = 5, StudentName = "Ron" , Age = 21 }
		};

		var studentsGroupByStandard = from s in studentList
									  group s by s.StandardID into sg
									  orderby sg.Key
									  select new { sg.Key, sg };


		foreach (var group in studentsGroupByStandard)
		{
			Console.WriteLine("StandardID {0}:", group.Key);

			group.sg.ToList().ForEach(st => Console.WriteLine(st.StudentName));
		}
	}
}

public class Student
{

	public int StudentID { get; set; }
	public string StudentName { get; set; }
	public int Age { get; set; }
	public int StandardID { get; set; }
}
--------------------------------------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;


public class Program
{
    public static void Main()
    {
        // Student collection
        List<Employee> empList = new List<Employee>()
        {
                 new Employee() {Employee_ID = 7623,  Employee_Name = "mary", Salary = 5000, Experience = 5 },
                 new Employee() { Employee_ID  = 1339, Employee_Name = "john", Salary = 4000, Experience = 4 },
                 new Employee() { Employee_ID  = 8903, Employee_Name = "gilli", Salary = 7000, Experience = 8 },
                 new Employee() { Employee_ID  = 2354, Employee_Name = "sure", Salary = 2000, Experience = 2 },
                 new Employee() { Employee_ID  = 7893, Employee_Name = "John", Salary = 8000, Experience = 10 },
                  new Employee() { Employee_ID  = 8762, Employee_Name = "Steve", Salary = 2342, Experience = 1 },
                 new Employee() { Employee_ID  = 6543, Employee_Name = "Bill", Salary = 85678, Experience = 3 },
                 new Employee() { Employee_ID  = 6781, Employee_Name = "Ram", Salary = 334231, Experience = 6 },
                 new Employee() { Employee_ID  = 0890, Employee_Name = "MÃ¼ller", Salary = 88968, Experience = 7 },
                 new Employee() { Employee_ID  = 8786, Employee_Name = "Ron", Salary = 45455, Experience = 10 },
        };

        var EmployeeGroupByStandard = from s in empList
                                      group s by s.Employee_ID into eg
                                      orderby eg.Key
                                      select new { eg.Key, eg };


        foreach (var group in EmployeeGroupByStandard)
        {
            Console.WriteLine("Employee_ID {0}:", group.Key);

            group.eg.ToList().ForEach(emp => Console.WriteLine("Name:{0},Experience :{1},Salary:{2}", emp.Employee_Name,emp.Experience,emp.Salary));
        }
        Console.ReadKey();
    }
}
public class Employee
{
    public int Employee_ID { get; set; }
    public string Employee_Name { get; set; }
    public int Salary { get; set; }
    public int Experience { get; set; }
}

4)----------------------------------------------------------------------------------------------------------------
	using System;
using System.Linq;
using System.Collections.Generic;


public class Program
{
	public static void Main()
	{
		// Student collection
		IList<Student> studentList = new List<Student>() {
			new Student() { StudentID = 1, StudentName = "John", Age = 18, StandardID = 1 } ,
				new Student() { StudentID = 2, StudentName = "Steve",  Age = 21, StandardID = 1 } ,
				new Student() { StudentID = 3, StudentName = "Bill",  Age = 18, StandardID = 2 } ,
				new Student() { StudentID = 4, StudentName = "Ram" , Age = 20, StandardID = 2 } ,
				new Student() { StudentID = 5, StudentName = "Ron" , Age = 21 }
		};

		var studentsGroupByStandard = from s in studentList
									  where s.StandardID > 0
									  group s by s.StandardID into sg
									  orderby sg.Key
									  select new { sg.Key, sg };


		foreach (var group in studentsGroupByStandard)
		{
			Console.WriteLine("StandardID {0}:", group.Key);

			group.sg.ToList().ForEach(st => Console.WriteLine(st.StudentName));
		}
	}
}

public class Student
{

	public int StudentID { get; set; }
	public string StudentName { get; set; }
	public int Age { get; set; }
	public int StandardID { get; set; }
}

5)----------------------------------------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;

public class Program
{
	public static void Main()
	{
		// Student collection
		IList<Student> studentList = new List<Student>() {
			new Student() { StudentID = 1, StudentName = "John", Age = 18, StandardID = 1 } ,
				new Student() { StudentID = 2, StudentName = "Steve",  Age = 21, StandardID = 1 } ,
				new Student() { StudentID = 3, StudentName = "Bill",  Age = 18, StandardID = 2 } ,
				new Student() { StudentID = 4, StudentName = "Ram" , Age = 20, StandardID = 2 } ,
				new Student() { StudentID = 5, StudentName = "Ron" , Age = 21 }
		};

		IList<Standard> standardList = new List<Standard>() {
			new Standard(){ StandardID = 1, StandardName="Standard 1"},
			new Standard(){ StandardID = 2, StandardName="Standard 2"},
			new Standard(){ StandardID = 3, StandardName="Standard 3"}
		};

		var studentsGroup = from stad in standardList
							join s in studentList
							on stad.StandardID equals s.StandardID
								into sg
							select new
							{
								StandardName = stad.StandardName,
								Students = sg
							};

		foreach (var group in studentsGroup)
		{
			Console.WriteLine(group.StandardName);

			group.Students.ToList().ForEach(st => Console.WriteLine(st.StudentName));
		}

	}
}

public class Student
{
    public int StudentID { get; set; }
	public string StudentName { get; set; }
	public int Age { get; set; }
	public int StandardID { get; set; }
}

public class Standard
{
	public int StandardID { get; set; }
	public string StandardName { get; set; }
}

6)----------------------------------------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;


public class Program
{
	public static void Main()
	{
		// Student collection
		IList<Student> studentList = new List<Student>() {
			new Student() { StudentID = 1, StudentName = "John", Age = 18, StandardID = 1 } ,
				new Student() { StudentID = 2, StudentName = "Steve",  Age = 21, StandardID = 1 } ,
				new Student() { StudentID = 3, StudentName = "Bill",  Age = 18, StandardID = 2 } ,
				new Student() { StudentID = 4, StudentName = "Ram" , Age = 20, StandardID = 2 } ,
				new Student() { StudentID = 5, StudentName = "Ron" , Age = 21 }
		};

		var sortedStudents = from s in studentList
							 orderby s.StandardID, s.Age
							 select new
							 {
								 StudentName = s.StudentName,
								 Age = s.Age,
								 StandardID = s.StandardID
							 };

		sortedStudents.ToList().ForEach(s => Console.WriteLine("Student Name: {0}, Age: {1}, StandardID: {2}", s.StudentName, s.Age, s.StandardID));


	}
}

public class Student
{

	public int StudentID { get; set; }
	public string StudentName { get; set; }
	public int Age { get; set; }
	public int StandardID { get; set; }
}
7)----------------------------------------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;


public class Program
{
	public static void Main()
	{
		// Student collection
		IList<Student> studentList = new List<Student>() {
			new Student() { StudentID = 1, StudentName = "John", Age = 18, StandardID = 1 } ,
				new Student() { StudentID = 2, StudentName = "Steve",  Age = 21, StandardID = 1 } ,
				new Student() { StudentID = 3, StudentName = "Bill",  Age = 18, StandardID = 2 } ,
				new Student() { StudentID = 4, StudentName = "Ram" , Age = 20, StandardID = 2 } ,
				new Student() { StudentID = 5, StudentName = "Ron" , Age = 21 }
		};

		IList<Standard> standardList = new List<Standard>() {
			new Standard(){ StandardID = 1, StandardName="Standard 1"},
			new Standard(){ StandardID = 2, StandardName="Standard 2"},
			new Standard(){ StandardID = 3, StandardName="Standard 3"}
		};


		var studentWithStandard = from s in studentList
								  join stad in standardList
								  on s.StandardID equals stad.StandardID
								  select new
								  {
									  StudentName = s.StudentName,
									  StandardName = stad.StandardName
								  };

		studentWithStandard.ToList().ForEach(s => Console.WriteLine("{0} is in {1}", s.StudentName, s.StandardName));


	}
}

public class Student
{

	public int StudentID { get; set; }
	public string StudentName { get; set; }
	public int Age { get; set; }
	public int StandardID { get; set; }
}

public class Standard
{

	public int StandardID { get; set; }
	public string StandardName { get; set; }
}

8)----------------------------------------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;

					
public class Program
{
	public static void Main()
	{
		// Student collection
		IList<Student> studentList = new List<Student>() { 
			new Student() { StudentID = 1, StudentName = "John", Age = 18, StandardID = 1 } ,
				new Student() { StudentID = 2, StudentName = "Steve",  Age = 21, StandardID = 1 } ,
				new Student() { StudentID = 3, StudentName = "Bill",  Age = 18, StandardID = 2 } ,
				new Student() { StudentID = 4, StudentName = "Ram" , Age = 20, StandardID = 2 } ,
				new Student() { StudentID = 5, StudentName = "Ron" , Age = 21 } 
		};
		
		IList<Standard> standardList = new List<Standard>() { 
			new Standard(){ StandardID = 1, StandardName="Standard 1"},
			new Standard(){ StandardID = 2, StandardName="Standard 2"},
			new Standard(){ StandardID = 3, StandardName="Standard 3"}
		};
		
		
		var nestedQueries = from s in studentList
                    where s.Age > 18 && s.StandardID == 
                        (from std in standardList
                        where std.StandardName == "Standard 1"
                        select std.StandardID).FirstOrDefault()
                            select s;

		nestedQueries.ToList().ForEach(s => Console.WriteLine(s.StudentName));  
		
	}
}

public class Student{

	public int StudentID { get; set; }
	public string StudentName { get; set; }
	public int Age { get; set; }
	public int StandardID { get; set; }		
}

public class Standard{

	public int StandardID { get; set; }
	public string StandardName { get; set; }	
}
